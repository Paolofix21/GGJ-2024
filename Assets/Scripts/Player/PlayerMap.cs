//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMap"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""fabcdebd-49c6-4baf-a87d-b73bc39eb6b8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a96f03f2-7604-4f97-80de-28812173070f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""313ddb26-de51-4caa-a383-33454958249b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""ece548ec-7186-44e2-bab0-96ada2e27b95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAt"",
                    ""type"": ""Value"",
                    ""id"": ""035d08ee-6752-4da1-a288-69d3d62810f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7311c7d6-7bd2-4322-a8fa-8c2d4c66c9b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon01"",
                    ""type"": ""Button"",
                    ""id"": ""567562b4-721c-472b-9243-3af8b65ea985"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon02"",
                    ""type"": ""Button"",
                    ""id"": ""b1c161d4-9e04-4187-9a46-dbfb7e54d258"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon03"",
                    ""type"": ""Button"",
                    ""id"": ""48545bde-0c09-453a-9cce-1faf4b82dd95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon04"",
                    ""type"": ""Button"",
                    ""id"": ""65d443b0-e109-4b30-ab92-892f89077cd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon05"",
                    ""type"": ""Button"",
                    ""id"": ""0b75f4d8-ded9-4488-9725-d31bf3878e40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ContinuousShoot"",
                    ""type"": ""Button"",
                    ""id"": ""bcba1b2b-1f5d-4483-9239-6afdaaf1c270"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""62f5b700-2c78-4d20-aed8-4cbd4f6e9957"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f978c19a-b6fd-48f3-84b6-ebb72a499c1e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a9127d70-cbda-49bd-a157-d89bdaa0aab1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""29bfba9b-be0f-433f-863d-ccad9fe9a461"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3568a44a-9e9d-49b1-8bd8-8624bf30a418"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a79c268-4082-40b7-b6b8-904e83926412"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""240458be-afc0-4519-826f-7b057b167337"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16deacfb-8864-45ca-894b-722289d82309"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9382c4a6-527a-4a77-bd35-46a0627a6295"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e9aba12-315f-4990-8a13-15ced3f486da"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1321a4db-dffd-4229-b220-39b8b5b2053b"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f99d5480-2bbc-40a7-b137-01555914f3ed"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40bc2383-9528-4d9c-b567-d615251df57f"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon03"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e84f9c4d-0a87-49ad-b984-f9ca6417db75"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon04"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f1c95af-d512-4fa5-b4b8-2ce94eb77f4b"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon05"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9f41657-0fb8-4692-ac9a-696ba85e0186"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContinuousShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d50f5ff1-f261-4212-977e-a38a0d68dd56"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HUD"",
            ""id"": ""869bdca4-37fd-44b5-b14c-af8b59b89c16"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""414c318a-ae05-453d-8dd9-59bd1cb4d731"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9c044ee-54fd-4083-8746-0a90355350ab"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Movement = m_PlayerActions.FindAction("Movement", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Crouch = m_PlayerActions.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerActions_LookAt = m_PlayerActions.FindAction("LookAt", throwIfNotFound: true);
        m_PlayerActions_Shoot = m_PlayerActions.FindAction("Shoot", throwIfNotFound: true);
        m_PlayerActions_Weapon01 = m_PlayerActions.FindAction("Weapon01", throwIfNotFound: true);
        m_PlayerActions_Weapon02 = m_PlayerActions.FindAction("Weapon02", throwIfNotFound: true);
        m_PlayerActions_Weapon03 = m_PlayerActions.FindAction("Weapon03", throwIfNotFound: true);
        m_PlayerActions_Weapon04 = m_PlayerActions.FindAction("Weapon04", throwIfNotFound: true);
        m_PlayerActions_Weapon05 = m_PlayerActions.FindAction("Weapon05", throwIfNotFound: true);
        m_PlayerActions_ContinuousShoot = m_PlayerActions.FindAction("ContinuousShoot", throwIfNotFound: true);
        m_PlayerActions_RotateWeapon = m_PlayerActions.FindAction("RotateWeapon", throwIfNotFound: true);
        // HUD
        m_HUD = asset.FindActionMap("HUD", throwIfNotFound: true);
        m_HUD_Menu = m_HUD.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Movement;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Crouch;
    private readonly InputAction m_PlayerActions_LookAt;
    private readonly InputAction m_PlayerActions_Shoot;
    private readonly InputAction m_PlayerActions_Weapon01;
    private readonly InputAction m_PlayerActions_Weapon02;
    private readonly InputAction m_PlayerActions_Weapon03;
    private readonly InputAction m_PlayerActions_Weapon04;
    private readonly InputAction m_PlayerActions_Weapon05;
    private readonly InputAction m_PlayerActions_ContinuousShoot;
    private readonly InputAction m_PlayerActions_RotateWeapon;
    public struct PlayerActionsActions
    {
        private @PlayerMap m_Wrapper;
        public PlayerActionsActions(@PlayerMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerActions_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Crouch => m_Wrapper.m_PlayerActions_Crouch;
        public InputAction @LookAt => m_Wrapper.m_PlayerActions_LookAt;
        public InputAction @Shoot => m_Wrapper.m_PlayerActions_Shoot;
        public InputAction @Weapon01 => m_Wrapper.m_PlayerActions_Weapon01;
        public InputAction @Weapon02 => m_Wrapper.m_PlayerActions_Weapon02;
        public InputAction @Weapon03 => m_Wrapper.m_PlayerActions_Weapon03;
        public InputAction @Weapon04 => m_Wrapper.m_PlayerActions_Weapon04;
        public InputAction @Weapon05 => m_Wrapper.m_PlayerActions_Weapon05;
        public InputAction @ContinuousShoot => m_Wrapper.m_PlayerActions_ContinuousShoot;
        public InputAction @RotateWeapon => m_Wrapper.m_PlayerActions_RotateWeapon;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @LookAt.started += instance.OnLookAt;
            @LookAt.performed += instance.OnLookAt;
            @LookAt.canceled += instance.OnLookAt;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Weapon01.started += instance.OnWeapon01;
            @Weapon01.performed += instance.OnWeapon01;
            @Weapon01.canceled += instance.OnWeapon01;
            @Weapon02.started += instance.OnWeapon02;
            @Weapon02.performed += instance.OnWeapon02;
            @Weapon02.canceled += instance.OnWeapon02;
            @Weapon03.started += instance.OnWeapon03;
            @Weapon03.performed += instance.OnWeapon03;
            @Weapon03.canceled += instance.OnWeapon03;
            @Weapon04.started += instance.OnWeapon04;
            @Weapon04.performed += instance.OnWeapon04;
            @Weapon04.canceled += instance.OnWeapon04;
            @Weapon05.started += instance.OnWeapon05;
            @Weapon05.performed += instance.OnWeapon05;
            @Weapon05.canceled += instance.OnWeapon05;
            @ContinuousShoot.started += instance.OnContinuousShoot;
            @ContinuousShoot.performed += instance.OnContinuousShoot;
            @ContinuousShoot.canceled += instance.OnContinuousShoot;
            @RotateWeapon.started += instance.OnRotateWeapon;
            @RotateWeapon.performed += instance.OnRotateWeapon;
            @RotateWeapon.canceled += instance.OnRotateWeapon;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @LookAt.started -= instance.OnLookAt;
            @LookAt.performed -= instance.OnLookAt;
            @LookAt.canceled -= instance.OnLookAt;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Weapon01.started -= instance.OnWeapon01;
            @Weapon01.performed -= instance.OnWeapon01;
            @Weapon01.canceled -= instance.OnWeapon01;
            @Weapon02.started -= instance.OnWeapon02;
            @Weapon02.performed -= instance.OnWeapon02;
            @Weapon02.canceled -= instance.OnWeapon02;
            @Weapon03.started -= instance.OnWeapon03;
            @Weapon03.performed -= instance.OnWeapon03;
            @Weapon03.canceled -= instance.OnWeapon03;
            @Weapon04.started -= instance.OnWeapon04;
            @Weapon04.performed -= instance.OnWeapon04;
            @Weapon04.canceled -= instance.OnWeapon04;
            @Weapon05.started -= instance.OnWeapon05;
            @Weapon05.performed -= instance.OnWeapon05;
            @Weapon05.canceled -= instance.OnWeapon05;
            @ContinuousShoot.started -= instance.OnContinuousShoot;
            @ContinuousShoot.performed -= instance.OnContinuousShoot;
            @ContinuousShoot.canceled -= instance.OnContinuousShoot;
            @RotateWeapon.started -= instance.OnRotateWeapon;
            @RotateWeapon.performed -= instance.OnRotateWeapon;
            @RotateWeapon.canceled -= instance.OnRotateWeapon;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // HUD
    private readonly InputActionMap m_HUD;
    private List<IHUDActions> m_HUDActionsCallbackInterfaces = new List<IHUDActions>();
    private readonly InputAction m_HUD_Menu;
    public struct HUDActions
    {
        private @PlayerMap m_Wrapper;
        public HUDActions(@PlayerMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Menu => m_Wrapper.m_HUD_Menu;
        public InputActionMap Get() { return m_Wrapper.m_HUD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HUDActions set) { return set.Get(); }
        public void AddCallbacks(IHUDActions instance)
        {
            if (instance == null || m_Wrapper.m_HUDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HUDActionsCallbackInterfaces.Add(instance);
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IHUDActions instance)
        {
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IHUDActions instance)
        {
            if (m_Wrapper.m_HUDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHUDActions instance)
        {
            foreach (var item in m_Wrapper.m_HUDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HUDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HUDActions @HUD => new HUDActions(this);
    public interface IPlayerActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnLookAt(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnWeapon01(InputAction.CallbackContext context);
        void OnWeapon02(InputAction.CallbackContext context);
        void OnWeapon03(InputAction.CallbackContext context);
        void OnWeapon04(InputAction.CallbackContext context);
        void OnWeapon05(InputAction.CallbackContext context);
        void OnContinuousShoot(InputAction.CallbackContext context);
        void OnRotateWeapon(InputAction.CallbackContext context);
    }
    public interface IHUDActions
    {
        void OnMenu(InputAction.CallbackContext context);
    }
}
